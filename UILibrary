-- Essence UI Library (Improved)
-- Designed for Executors (No ModuleScripts)

local Essence = {}

local TweenService = game:GetService("TweenService")
local UIS = game:GetService("UserInputService")

local function create(class, props)
    local obj = Instance.new(class)
    for i, v in pairs(props) do
        obj[i] = v
    end
    return obj
end

function Essence:CreateWindow(title, version)
    local ScreenGui = create("ScreenGui", {
        Name = "EssenceUI",
        ResetOnSpawn = false,
        Parent = game:GetService("CoreGui")
    })

    local Main = create("Frame", {
        BackgroundColor3 = Color3.fromRGB(20, 20, 20),
        Size = UDim2.new(0, 500, 0, 350),
        Position = UDim2.new(0.5, -250, 0.5, -175),
        AnchorPoint = Vector2.new(0.5, 0.5),
        BorderSizePixel = 0,
        Parent = ScreenGui,
        Draggable = true,
        Active = true
    })

    create("UICorner", {CornerRadius = UDim.new(0, 8), Parent = Main})

    local Title = create("TextLabel", {
        Text = title .. " - " .. version,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 30),
        Font = Enum.Font.GothamBold,
        TextSize = 20,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        Parent = Main
    })

    local TabsFrame = create("Frame", {
        Size = UDim2.new(0, 120, 1, -30),
        Position = UDim2.new(0, 0, 0, 30),
        BackgroundColor3 = Color3.fromRGB(25, 25, 25),
        BorderSizePixel = 0,
        Parent = Main
    })

    local TabButtons = create("UIListLayout", {
        Parent = TabsFrame,
        SortOrder = Enum.SortOrder.LayoutOrder
    })

    local ContentFrame = create("Frame", {
        Size = UDim2.new(1, -120, 1, -30),
        Position = UDim2.new(0, 120, 0, 30),
        BackgroundTransparency = 1,
        Parent = Main
    })

    function Essence:CreateTab(name)
        local TabButton = create("TextButton", {
            Text = name,
            Size = UDim2.new(1, 0, 0, 30),
            BackgroundColor3 = Color3.fromRGB(30, 30, 30),
            TextColor3 = Color3.fromRGB(255, 255, 255),
            Font = Enum.Font.Gotham,
            TextSize = 16,
            Parent = TabsFrame
        })

        local TabFrame = create("Frame", {
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            Visible = false,
            Parent = ContentFrame
        })

        local Layout = create("UIListLayout", {
            Padding = UDim.new(0, 6),
            SortOrder = Enum.SortOrder.LayoutOrder,
            Parent = TabFrame
        })

        TabButton.MouseButton1Click:Connect(function()
            for _, v in pairs(ContentFrame:GetChildren()) do
                if v:IsA("Frame") then
                    v.Visible = false
                end
            end
            TabFrame.Visible = true
        end)

        local tab = {}

        function tab:Toggle(label, default, callback)
            local state = default or false

            local Holder = create("Frame", {
                Size = UDim2.new(1, -10, 0, 30),
                BackgroundTransparency = 1,
                Parent = TabFrame
            })

            local Label = create("TextLabel", {
                Text = "  " .. label,
                Size = UDim2.new(0.8, 0, 1, 0),
                BackgroundTransparency = 1,
                Font = Enum.Font.Gotham,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextColor3 = Color3.new(1,1,1),
                Parent = Holder
            })

            local ToggleBack = create("Frame", {
                Size = UDim2.new(0, 40, 0, 20),
                Position = UDim2.new(1, -50, 0.5, -10),
                BackgroundColor3 = Color3.fromRGB(60, 60, 60),
                BorderSizePixel = 0,
                Parent = Holder
            })
            create("UICorner", {Parent = ToggleBack})

            local Dot = create("Frame", {
                Size = UDim2.new(0, 16, 0, 16),
                Position = UDim2.new(0, 2, 0.5, -8),
                BackgroundColor3 = Color3.fromRGB(200, 200, 200),
                BorderSizePixel = 0,
                Parent = ToggleBack
            })
            create("UICorner", {Parent = Dot})

            local function updateToggleVisual()
                local targetPos = state and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)
                local targetColor = state and Color3.fromRGB(0, 170, 127) or Color3.fromRGB(60, 60, 60)
                TweenService:Create(Dot, TweenInfo.new(0.25), {Position = targetPos}):Play()
                TweenService:Create(ToggleBack, TweenInfo.new(0.25), {BackgroundColor3 = targetColor}):Play()
            end

            updateToggleVisual()

            ToggleBack.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    state = not state
                    updateToggleVisual()
                    callback(state)
                end
            end)
        end

        function tab:Textbox(label, isNumeric, callback)
            local Holder = create("Frame", {
                Size = UDim2.new(1, -10, 0, 30),
                BackgroundTransparency = 1,
                Parent = TabFrame
            })

            local Label = create("TextLabel", {
                Text = "  " .. label,
                Size = UDim2.new(0.5, 0, 1, 0),
                BackgroundTransparency = 1,
                Font = Enum.Font.Gotham,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextColor3 = Color3.new(1,1,1),
                Parent = Holder
            })

            local Box = create("TextBox", {
                Size = UDim2.new(0, 100, 0, 25),
                Position = UDim2.new(1, -110, 0.5, -12),
                Text = "",
                PlaceholderText = isNumeric and "Enter number" or "Enter text",
                BackgroundColor3 = Color3.fromRGB(40, 40, 40),
                BorderSizePixel = 0,
                TextColor3 = Color3.new(1,1,1),
                Font = Enum.Font.Gotham,
                TextSize = 14,
                Parent = Holder
            })
            create("UICorner", {Parent = Box})

            Box.FocusLost:Connect(function(enter)
                if enter then
                    local input = Box.Text
                    if isNumeric then
                        input = tonumber(input)
                    end
                    callback(input)
                end
            end)
        end

        function tab:Slider(label, min, max, default, callback)
            local val = default or min

            local Holder = create("Frame", {
                Size = UDim2.new(1, -10, 0, 40),
                BackgroundTransparency = 1,
                Parent = TabFrame
            })

            local Label = create("TextLabel", {
                Text = "  " .. label .. ": " .. tostring(val),
                Size = UDim2.new(1, 0, 0, 20),
                BackgroundTransparency = 1,
                Font = Enum.Font.Gotham,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextColor3 = Color3.new(1,1,1),
                Parent = Holder
            })

            local Bar = create("Frame", {
                Size = UDim2.new(1, -20, 0, 6),
                Position = UDim2.new(0, 10, 0, 24),
                BackgroundColor3 = Color3.fromRGB(60, 60, 60),
                BorderSizePixel = 0,
                Parent = Holder
            })
            create("UICorner", {CornerRadius = UDim.new(1,0), Parent = Bar})

            local Fill = create("Frame", {
                Size = UDim2.new((val-min)/(max-min), 0, 1, 0),
                BackgroundColor3 = Color3.fromRGB(0, 170, 127),
                BorderSizePixel = 0,
                Parent = Bar
            })
            create("UICorner", {CornerRadius = UDim.new(1,0), Parent = Fill})

            local Dot = create("Frame", {
                Size = UDim2.new(0, 12, 0, 12),
                AnchorPoint = Vector2.new(0.5, 0.5),
                Position = UDim2.new((val-min)/(max-min), 0, 0.5, 0),
                BackgroundColor3 = Color3.new(1,1,1),
                BorderSizePixel = 0,
                Parent = Bar
            })
            create("UICorner", {CornerRadius = UDim.new(1, 0), Parent = Dot})

            local dragging = false

            Dot.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = true
                end
            end)

            UIS.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                end
            end)

            Bar.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    local x = input.Position.X
                    local relX = math.clamp((x - Bar.AbsolutePosition.X) / Bar.AbsoluteSize.X, 0, 1)
                    val = math.floor((relX * (max - min) + min) * 100) / 100
                    Fill.Size = UDim2.new(relX, 0, 1, 0)
                    Dot.Position = UDim2.new(relX, 0, 0.5, 0)
                    Label.Text = "  " .. label .. ": " .. tostring(val)
                    callback(val)
                end
            end)

            UIS.InputChanged:Connect(function(input)
                if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    local x = input.Position.X
                    local relX = math.clamp((x - Bar.AbsolutePosition.X) / Bar.AbsoluteSize.X, 0, 1)
                    val = math.floor((relX * (max - min) + min) * 100) / 100
                    Fill.Size = UDim2.new(relX, 0, 1, 0)
                    Dot.Position = UDim2.new(relX, 0, 0.5, 0)
                    Label.Text = "  " .. label .. ": " .. tostring(val)
                    callback(val)
                end
            end)
        end

        return tab
    end

    return Essence
end

return Essence
